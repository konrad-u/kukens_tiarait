# Spielregeln + Random notes

- Drei Spieler spielen gleichzeitig in "Echtzeit".
- Ziel des Spiels ist es, möglichst große Bereiche der Spielwelt durch "Überfahren" mit eigenen Bots mit der eigenen Farbe zu färben.
- Die Spielwelt enthält Hindernisse, die die Bewegungsfreiheit beschränken.
- Jeder Spieler hat Kontrolle über drei Bots (nummeriert 0, 1, 2).
- **Bot 0** (**Pyramide auf der Spitze**) hat Geschwindigkeit 110% und löscht alle (auch eigene) überfahrene Felder
- **Bot 1** (**Quader**) hat Geschwindigkeit 100% und färbt überfahrene Felder in eigener Farbe
- **Bot 2** (**Pyramide**) hat Geschwindigkeit 67% und färbt neben seiner Position auch das nächste Nachbarfeld
- Die Geschwindigkeit der Bots ist festgelegt und kann nicht gebremst werden. Steuerung erfolgt ausschließlich durch Lenken (Richtungsvektor beliebiger Länge).
- Bots blockieren sich nicht gegenseitig, aber es kann die Farbe anderer Spieler übermalt werden.
- Das Spiel endet mit Ablauf des Zeitlimits. Gewonnen hat der Spieler mit der maximalen Punktzahl. Haben mehrere Spieler die maximale Punktzahl, endet das Spiel unentschieden.

## Essential methods

- **void** `setMoveDirection (int botNr, float xDirection, float yDirection)`

- **float** `getX (int playerNumber, int botNr)`

- **float** `getY (int playerNumber, int botNr)`

    - *should be combined and return an object representing the bot at that position*
    
- **boolean** `isWall (int x, int y)`

- **ColorChange** `getNextColorChange()` *(?)*
    - used to color the ground?

- **boolean** `isAlive()` 
    - *alive as long as timer is counting down?*


## Sequence of action: 

Always write the test code before production code. Only write enough production code to fail the test code. 

1. **Imitate game by tracking all bots of all players**
    1. model game board
    2. model bots
    3. map server content
        1. obstacles
        2. bots and their starting positions
        3. time
    4. I can track everything on server?    
    
2. **Develop Strategies for each Bot**

    1. Modeling of game board as a graph(?)
    2. Pathfinding Algorithms (Dijkstra's algorithm, )
    
        https://www.baeldung.com/java-a-star-pathfinding
        

| Bot | Symbol | Speed | Skill | Strategy Suggestions? |
|---|---|---|---|---|
| 0 | Pyramid on head | 110% | erases all color | follow enemy with most color |
| 1 | Rectangle | 100% | colors in own color  | go opposite of enemies, or follow bot 0? |
| 2 | Pyramid | 67% | colors own + neighboring field | go opposite direction of enemies? |

| Lecture | Concepts | How to use? |
|---|---|---|
| Clustering  | grouping, identifying outliers, V1: Bereiche vorgegeben, V2: Datenpunkte zusammenfassen |   |
| Kooperative Wegesuche  |   |   |



## Mindestanforderungen

- Vorausschauende Bewegung (muss nicht A* sein, aber auch kein ad-hoc-Verfahren nur über Nachbarschaft)
- Unterschiedliche Nutzung der drei Bots (nicht alle identisch steuern, idealerweise - aber nicht zwingend kooperativ unter Ausnutzung der einzelnen Besonderheiten)