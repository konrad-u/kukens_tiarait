# Project Documentation

Here I will describe the steps I took in creating my player strategies for the Tiarait bots. 

## Step 0: Multirun automation, game state tracking
Unlike my previous programs for the SARG player, in this project I set up a Multirun run configuration (https://plugins.jetbrains.com/plugin/7248-multirun) through which I could in a single test run multiple instances of the default player NetworkClient class, making testing significantly easier. 

After setting up the project and a dummy player class, I set up the GameBoard class to imitate the server and coloring. Similar to the SARG project, I use a console print to make sure that the imitation is accurate, and that the player score countrs as well as color indications work properly. 

Once I had the test configuration and game tracking setup, I adjusted the GameBoard class to contain a 2D Array of BoardFields; this would allow me to save the fieldValue and coordinates of the BoardField, to be able to use them in later calculations *e.g. for pathfinding distances, to calculate each player's current score etc.). 

I set up a Boardfield Class with 3 integers, an x, a y and a fieldValue, which would be used to save the status of the field (either empty, a wall or painted by a player), encoded in an integer with a value 0-5.

## Step 1: Abstract Bot Class

To outline the general behaviour of any of the bots before developing specific strategies for each bot to follow, I outlined an AbstractBot class similarly to an interface to prescribe general fields and methods that each bot class would need to formulate a strategy, regardless of skill. In the first design iteration, the AbstractBot defined the following fields: 
 - int playerNumber, int botNr (self explanatory);
 - GameBoard gameBoard, referencing the gameBoard in the networkClient class to maintain the game state
 - BoardField botPosition, BoardField botGoal, needed to in the generic stage set up the two directional floats that the NetworkClient.setMoveDirection would use to direct the bot, in later stages to determine the path (and thus also the direction) for more sophisticated path finding.
 - BotDirection direction, an inner class holding just two floats for the NetworkClient's setMoveDirection method, and 
 - boolean atGoal, which could be used in the NetworkClient to indicate when it was time to determine a new goal
 
 I decided to implement a very simple strategy of scanning the nearest neighbors, adding all non-wall options to an ArrayList of neighbors, and picking the first available option to test the method flow between server game state referencing. 

I here started considering how I would want to go about making and using strategies, as I considered either maintaining a single goal throughout the game, updating it at regular intervals by reassessing the game board, or creating smaller goals, and, upon reaching them, creating new goals. In this respect, the tiarait is different from sarg in that it involves real-time playing, and allows each developer their own way of dealing with it. 
I decided to go with the latter option, figuring that for testing and strategy development starting with smaller goals, and, once some set of strategies was developed, to then experiment with more sophisticated options. I assumed at this point that there would be some adequate balance between continuously re-assessing the gameboard and otherwise just moving towards an outlined goal. 

The setBotGoal would need to be a BFS method searching around each bot for acceptable goals, selected by a yet-to-be-determined heuristic. 

## Step 2: Developing a recursive pathfinding strategy
I chose to start with the simple pathfinding algorithm listed on the wikipedia page https://en.wikipedia.org/wiki/Pathfinding which essentially tracks the way from a goal to the starting point over all neighbors, extending the information of a BoardField with a counter integer, and, once the starting point has been reached, following the path of lowest counters to the goal. 
To do this I created an additional class (BoardFieldPlusCounter) which would hold, additionally to the BoardField it references, an int field pathLengthCounter, as well as some comparison methods for comparing instances of itself against each other. 

I created then two methods for first listing all neighboring boardFields as potential options, and second for creating the path from the goal to that botPosition.
For the first method, I reference the surrounding boardFields which are not walls, not the field itself, and are not further away from the goal as the boardField itself. THese were implemented via methods added
 
I figured at this point I needed to do some testing before continuing, so I created some test cases within the AbstractBot class and within the DTPlayer class. 

- had to fix the mustBeNeighbor
- had to adjust how, once the starting position is reached from the goal, the end array which holds the path, is made, and goes from bot position to bot goal
- 

Once I had the array of neighboring fields which made the definitive path from the bot to the goal, I set up the setDirection method to loop through the array, leaving the current botDirection as long as it hasn't been reached, or setting the intermediate direction via the bot's position and the field it is closest to. 
In the DTPlayer class, this was tested by setting up an arbitrary static goal, and then once the game loop starts, 
- updating the gameBoard
- setting the bot position
- checking if the bot is at its goal 
-- if not at goal, you set the direction, move the bot and check
-- else, set a new goal.

the set new goal was to be left to the  

# Issues
I need to fix bots to only go diagonal when there aren't any walls around them; bots get hung up on corners. Will come back to this later. This can probably be adjusted in the getNeighbors class. 

I currently fixed this issue, by only allowing vertical and horizonal movement (thus eliminating diagonal stepping), and it seems to work better. Sometimes, some bots still don't move, but when they do they (most of the time) reach both test goals. 

## Step 3: Setting up basic goals
Once I had realized the pathfinding methods and could observe these working properly (via the setDirection method, and two static goals set in the DTPlayer class), it was time to create the concrete bot classes. I decided to, for each bot, start with a default goal based on the current game state, and then, depending on time left, try out more sophisticated goal determination and path weighing. 

### eraser bot (bot 0)

In the rough form the er

eraser bot goes to closest enemy field by scanning whole board 

- had to remove field setting for visual feedback, as otherwise bots woudn't recognise where sth had been or hadn't 

- had to add try catches to goalsetting, but now bots will pick up from inertia 

### painter bot (bot 1)

I figured that the painter bot in the first version should as a goal set itself to follow the painter bot of the best player, and 